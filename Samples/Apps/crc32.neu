extern struct FILE { }

extern func fopen(anon str: raw CChar, anon mode: raw CChar) -> raw FILE
extern func fgetc(anon file: var raw FILE) -> CInt
extern func fclose(anon file: var raw FILE) -> CInt
extern func feof(anon file: var raw FILE) -> CInt
extern func putchar(anon ch: CInt) -> CInt

func makeLookupTable() -> [UInt32] {
    var data = [0 as! UInt32; 256]
    var i = 0
    while i < data.size() {
        var value = i as! UInt32
        var j = 0
        while j < 8 {
            if value & 1 {
                value = 0xedb88320 as! UInt32 ^ (value >> 1)
            } 
            else {
                value >>= 1
            }
            ++j
        }

        data[i] = value
        ++i
    }
    return data
}

func main(args: [String]) {
    if args.size() <= 1 {
        warnLine("usage: crc32 <path>")
        return 1
    }

    var file = fopen(args[1].characters(), "r".characters())
    defer fclose(file)

    let table = makeLookupTable()
    
    var state: UInt32 = 0xffffffff
    var c = fgetc(file)
    while not feof(file) {
        state = table[(state ^ c) & 0xff] ^ (state >> 8);
        c = fgetc(file)
    }

    let digest = ~state
    printLine(digest)
}
