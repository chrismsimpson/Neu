enum BetterOptional<T> {
    some(T)
    none
}

enum BetterResult<T, E> {
    imFineHowAreYou(T)
    theWorldIsBurning(E)
}

enum ObjectivelyBetterOptional<T> {
    some(value: T, jokeMetadata: String)
    none
}

func makeResult(okay: Bool) -> BetterResult<Int64, String> {

    if okay {

        return BetterResult.imFineHowAreYou(42)
    }

    return BetterResult.theWorldIsBurning("666")
}

func betterOptionalFrom<T>(anon optional: T?) -> BetterOptional<T> {

    if optional.hasValue() {

        return BetterOptional.some(optional!)
    }

    return BetterOptional.none()
}

func toObjectivelyBetterOptional<T>(anon optional: BetterOptional<T>) -> ObjectivelyBetterOptional<T> {
    return when optional {
        BetterOptional.some(value) => ObjectivelyBetterOptional.some(value: value, jokeMetadata: "I'm a joke")
        BetterOptional.none => ObjectivelyBetterOptional.none()
    }
}

func main() {

    when makeResult(okay: true) {

        imFineHowAreYou(x) => {

            let a: Int64? = x
            
            // when betterOptionalFrom(a) {

            //     some(x) => printLine("Success! we're fine and there's a {} in our optional", x)

            when toObjectivelyBetterOptional(betterOptionalFrom(a)) {
                some(value: x) => printLine("Success! we're fine and there's a {} in our optional", x)
                none => printLine("What??????")
            }
        }
        
        theWorldIsBurning => printLine("What do you mean the world is burning, it's perfectly fine")
    }

    let str = when makeResult(okay: false) {
        imFineHowAreYou => "No you're not!!!!111One!"
        theWorldIsBurning => "So it is..."
    }
    
    if str == "So it is..." {

        return 0
    }

    return 1
}
