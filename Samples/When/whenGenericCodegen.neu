func genericValue<T>(anon x: T) -> Int64 {
    return when x {
        (3) => 1
        (2) => 2
        (1) => 3
        else => 0
    }
}

func genericEnum<T>(anon x: T) -> Int64 {
    return when x {
        a(y) => y
        b => 2
        c => 3
        else => 0
    }
}

enum X {
    a(Int64)
    b
    c
}

ref enum Y {
    a(Int64)
    b
    c
}

func main() {
    
    printLine("{}", genericValue(3))
    printLine("{}", genericValue(2))
    printLine("{}", genericValue(1))

    printLine("{}", genericEnum(X.a(2)))
    printLine("{}", genericEnum(X.b()))

    printLine("{}", genericEnum(Y.a(4)))
    printLine("{}", genericEnum(Y.b()))
}
