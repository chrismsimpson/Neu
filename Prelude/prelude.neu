extern struct String {
    func split(this, anon c: CChar) -> [String]
    func characters(this) -> raw CChar
    func reverse(this) -> String
    func toLowercase(this) -> String
    func toUppercase(this) -> String
    func toSnakecase(this) -> String
    func toTitlecase(this) -> String
    func toInt(this) -> Int32?
    func toUInt(this) -> UInt32?
    func isWhitespace(this) -> Bool
    func hash(this) -> UInt32
    func substring(this, start: UInt, length: UInt) -> String
    func repeated(character: CChar, count: UInt) -> String
    func isEmpty(this) -> Bool
    func length(this) -> UInt
}

extern struct Array<T> {
    func isEmpty(this) -> Bool
    func size(this) -> UInt
    func capacity(this) -> UInt
    func ensureCapacity(this, anon capacity: UInt) throws
    func addCapacity(this, anon capacity: UInt) throws
    func resize(var this, anon size: UInt) throws
    func push(var this, anon value: T) throws
    func pop(var this) -> T?
}

extern struct Optional<T> {
    func hasValue(this) -> Bool
    func value(this) -> T
    func valueOr(this, anon x: T) -> T
    func Optional<S>(anon x: S) -> Optional<S>
}

extern struct Dictionary<K, V> {
    func get(this, anon key: K) -> V?
    func contains(this, anon key: K) -> Bool
    func set(var this, key: K, value: V)
    func remove(var this, anon key: K) -> Bool
    func ensureCapacity(var this, anon capacity: UInt)
    func clear(var this)
    func size(this) -> UInt
    func capacity(this) -> UInt
    func keys(this) -> [K]
    func hash(this) -> UInt32
    func Dictionary<A, B>() -> Dictionary<A, B>
}

extern struct Tuple { }

extern struct Range { }

extern struct Error {
    func code(this) -> Int32
    func fromError(anon code: Int32)
}

